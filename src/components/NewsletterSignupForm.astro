---
import CloseIcon from "../assets/close.svg";
---

<form class="signup" novalidate>
  <p class="bold">Sign up for our newsletter</p>
  <!-- hidden fields to capture page title and url -->
  <input type="hidden" name="pageUri" value={Astro.url.href} />
  <input type="hidden" name="pageName" value={Astro.url.pathname} />
  <div class="input-box">
    <label for="newsletter-email" class="bold">Enter your email address</label>
    <input class="dark-bg input" type="email" name="email" id="newsletter-email" autocomplete="email" required>
  </div>
  <button type="submit" class="dark-bg btn">Subscribe Now</button>
</form>
<dialog class="signup-success">
  <p>Thanks for subscribing to our newsletter!</p>
  <button type="button" autofocus>
    <span class="visually-hidden">Close</span>
    <CloseIcon aria-hidden="true" />
  </button>
</dialog>

<script>
  import { actions, isInputError } from "astro:actions";

  const signupForm = document.querySelector("form.signup") as HTMLFormElement;
  const emailInputWrapper = signupForm.querySelector('div.input-box:has(input[name="email"])')!;
  const emailInput = emailInputWrapper?.querySelector("input")!;

  const signupDialog = document.querySelector("form.signup + dialog") as HTMLDialogElement;
  const signupCloseBtn = signupDialog.querySelector("button") as HTMLButtonElement;

  const clearPrevErrMsg = () => {
    if (!emailInput.hasAttribute("aria-invalid")) return;
    emailInput.removeAttribute("aria-invalid");
    emailInput.removeAttribute("aria-describedby");
    emailInput.nextElementSibling?.remove();
  }

  const showCurrErrMsg = (errId: string, errMsg: string) => {
    const errContainer = document.createElement("div");
    errContainer.id = errId;
    errContainer.classList.add("err-msg");
    // inline styles to take it out of the flex container
    errContainer.setAttribute("style", "position: absolute; top: 100%; z-index: 5;");
    errContainer.textContent = errMsg;
    emailInputWrapper.append(errContainer);
    emailInput.setAttribute("aria-invalid", "true");
    emailInput.setAttribute("aria-describedby", errId);
    emailInput.focus();
  }

  const showDialog = () => {
    signupDialog.showModal();
  }

  signupCloseBtn.addEventListener("click", () => {
    signupDialog.close();
  });

  signupForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(signupForm);
    const { error } = await actions.forms.newsletter(formData);
    clearPrevErrMsg();
    if (error) {
      console.log(error);
      const errId = "signup-email-err-msg";
      let errMsg;
      if (isInputError(error) && error.fields?.email) {
        errMsg = error.fields.email[0];
      } else {
        errMsg = "Oops! Something went wrong. Please try again later."
      }
      showCurrErrMsg(errId, errMsg!);
    } else {
      showDialog();
    }
  });
</script>

<style>
  .signup {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .signup p {
    font-size: 1.25rem;
  }

  .input-box {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .input-box label {
    width: max-content;
  }

  .input {
    width: 100%;
    border: 0.125rem solid;
    border-radius: 0.5rem;
    padding: 0.5rem;
  }

  .signup-success:open {
    position: fixed;
    width: min(40ch, 100% - 3rem);
    background-color: #fff;
    border: 0;
    border-radius: 0.625rem;
    margin: auto;
    padding: 1rem;
    font-weight: 500;
    font-size: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .signup-success button {
    --btn-size: 1.5rem;
    align-self: flex-start;
    display: flex;
    width: var(--btn-size);
    height: var(--btn-size);
    border-radius: 0.125rem;
    border: 0;
    outline-offset: 0;
  }

  .signup-success::backdrop {
    background-color: rgba(0, 0, 0, 0.75);
  }

  @media screen and (min-width: 30em) {
    .signup-success:open {
      gap: 0;
      justify-content: space-between;
    }

    .signup-success button {
      align-self: center;
    }
  }

  @media screen and (min-width: 48em) {
    .input-box {
      max-width: 70%;
    }

    .signup-success {
      font-size: 1.25rem;
    }
  }

  @media screen and (min-width: 60em) {
    .signup {
      flex-direction: row;
      align-items: flex-end;
      gap: 1rem;
    }

    .signup p {
      align-self: center;
      flex: 1;
    }

    .input-box {
      min-width: 50%;
    }
  }
</style>