---
const projectStageOptions = ['Gathering requirements', 'Budget approved', 'Vendor shortlisting', 'Ready to start', 'Mid-project', 'Needing help post-launch', 'Ongoing support required'];
const preferredTimeOptions = ['Morning (9am - 12pm)', 'Early Afternoon (12pm - 2pm)', 'Late Afternoon (2pm - 5pm)', 'Evening (5pm - 7pm)', "I'm flexible - suggest a time", 'I prefer email, not meetings'];
---

<form class="contact" novalidate>
  <p>Note that all form fields are required unless otherwise indicated.</p>
  <!-- hidden fields to capture page title and url -->
  <input type="hidden" name="pageUri" value={Astro.url.href} />
  <input type="hidden" name="pageName" value={Astro.url.pathname} />
  <div class="input-box">
    <label for="firstname" class="bold">First Name</label>
    <input class="light-bg input" type="text" name="firstname" id="firstname" autocomplete="given-name" required>
  </div>
  <div class="input-box">
    <label for="lastname" class="bold">Last Name</label>
    <input class="light-bg input" type="text" name="lastname" id="lastname" autocomplete="family-name" required>
  </div>
  <div class="input-box">
    <label for="contact-email" class="bold">Email</label>
    <span>For example: abcde@email.com</span>
    <input class="light-bg input" type="email" name="email" id="contact-email" autocomplete="email" required>
  </div>
  <div class="input-box">
    <label for="org"><span class="bold">Organization</span> (if applicable)</label>
    <input class="light-bg input" type="text" name="organization" id="org" autocomplete="organization">
  </div>
  <div class="input-box">
    <label for="url"><span class="bold">Website URL</span> (optional)</label>
    <input class="light-bg input" type="url" name="url" id="url" autocomplete="url">
  </div>
  <div class="input-box">
    <label for="role"><span class="bold">Your Role</span> (optional)</label>
    <input class="light-bg input" type="text" name="role" id="role" autocomplete="organization-title">
  </div>
  <div class="input-box">
    <label for="request" class="bold">How Can We Help You?</label>
    <textarea class="light-bg input" name="request" id="request" rows="5" required></textarea>
  </div>
  <div class="input-box">
    <label for="currstage"><span class="bold">What Stage Are You In?</span> (optional)</label>
    <div class="light-bg input">
      <select name="currstage" id="currstage">
        <option value="">Select</option>
        {
          projectStageOptions.map((option) => <option value={option}>{option}</option>)
        }
      </select>
    </div>
  </div>
  <div class="input-box">
    <label for="time" class="bold">Preferred Meeting Time</label>
    <div class="light-bg input">
      <select name="time" id="time" required>
        <option value="">Select</option>
        {
          preferredTimeOptions.map((option) => <option value={option}>{option}</option>)
        }
      </select>
    </div>
  </div>
  <div class="input-box">
    <label for="timezone" class="bold">Your Timezone</label>
    <input class="light-bg input" type="text" name="timezone" id="timezone" required>
  </div>
  <button type="submit" class="light-bg btn">Submit Inquiry</button>
</form>
<dialog class="enquiry-success">
  <h2>Success!</h2>
  <p>Thanks for your message. Our team has received it and will respond as soon as possible. Together, we can make digital spaces accessible to all.</p>
  <button type="button" class="light-bg btn" autofocus>Close</button>
</dialog>

<script>
  import { actions, isInputError } from "astro:actions";

  const contactForm = document.querySelector("form.contact") as HTMLFormElement;
  const contactFields = [...(contactForm.querySelectorAll("div.input-box input, div.input-box textarea, div.input-box select"))] as Array<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>;

  const contactDialog = document.querySelector("form.contact + dialog") as HTMLDialogElement;
  const contactCloseBtn = contactDialog.querySelector("button") as HTMLButtonElement;

  const clearPrevErrMsg = () => {
    contactFields.forEach((field) => {
      if (!field.hasAttribute("aria-invalid")) return;
      field.removeAttribute("aria-invalid");
      field.removeAttribute("aria-describedby");
      field.closest("div.input-box")?.querySelector("div.err-msg")?.remove();
    })
  }

  const showCurrErrMsg = (errFieldName: string, errMsg: string) => {
    const errField = contactFields.find((field) => field.name === errFieldName)!;
    const errId = `contact-${errFieldName}-err-msg`;
    const errContainer = document.createElement("div");
    errContainer.id = errId;
    errContainer.classList.add("err-msg");
    errContainer.textContent = errMsg;
    errField.closest("div.input-box")?.append(errContainer);
    errField.setAttribute("aria-invalid", "true");
    errField.setAttribute("aria-describedby", errId);
  }

  const showDialog = () => {
    contactDialog.showModal();
  }

  contactCloseBtn.addEventListener("click", () => {
    contactDialog.close();
  });

  contactForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(contactForm);
    const { error } = await actions.forms.contact(formData);
    clearPrevErrMsg();
    if (error && isInputError(error)) {
      console.log(error);
      let firstFieldErrName;
      for (const [field, message] of Object.entries(error.fields)) {
        if (!firstFieldErrName) {
          firstFieldErrName = field;
        }
        showCurrErrMsg(field, message[0]);
      }
      // set focus to the first field in error
      const firstErrField = contactForm.querySelector(`*[name="${firstFieldErrName}"]`) as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
      firstErrField?.focus();
    } else {
      contactFields.forEach((field) => field.value = "");
      showDialog();
    }
  });
</script>

<style>
  .contact {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .input-box {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .input-box label {
    width: max-content;
  }

  .input {
    width: 100%;
    border: 0.125rem solid;
    border-radius: 0.5rem;
    padding: 0.5rem;
  }

  .input select {
    width: 100%;
    font: inherit;
    letter-spacing: inherit;
    word-spacing: inherit;
    border: none;
    outline: none;
  }

  .enquiry-success:open {
    position: fixed;
    max-width: min(40ch, 100% - 3rem);
    background-color: #fff;
    border: 0;
    border-radius: 0.625rem;
    margin: auto;
    padding: 2rem 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .enquiry-success h2 {
    font-weight: 800;
    font-size: 1.5rem;
  }

  .enquiry-success p {
    font-size: 1.25rem;
  }

  .enquiry-success::backdrop {
    background-color: rgba(0, 0, 0, 0.75);
  }

  @media screen and (min-width: 48em) {
    .input-box {
      max-width: 70%;
    }
  }
</style>